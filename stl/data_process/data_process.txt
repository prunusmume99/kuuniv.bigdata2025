// 헤더 중복 포함 방지를 위한 지시어 (#pragma once)

// DataProcessor 클래스는 문자열 벡터 데이터를 정렬하거나 필터링하는 기능을 담당함

// 생성자: 외부에서 전달받은 문자열 벡터를 클래스 내부 멤버 변수 data_에 복사하여 초기화함
// - 초기화 리스트(: data_(data))를 사용하여 멤버 변수를 효율적으로 초기화함

// sort_by_length 함수는 data_의 복사본을 길이 기준으로 오름차순 정렬하여 반환함
// - std::sort 알고리즘 사용
// - 비교 기준으로 람다식([](const string&, const string&) { return a.length() < b.length(); })을 사용하여 문자열 길이를 기준으로 비교함

// filter_by_prefix 함수는 특정 접두사(prefix)로 시작하는 문자열만 골라 새로운 벡터에 복사해 반환함
// - std::copy_if 알고리즘 사용
// - 조건식을 람다식([&prefix](const string& s) { return s.find(prefix) == 0; })으로 정의
// - prefix는 외부 변수이므로 [&prefix]로 참조 캡처하여 사용

// main 함수에서는 테스트용 문자열 벡터를 선언하고 DataProcessor 객체를 생성함

// sort_by_length를 호출하여 문자열을 길이순으로 정렬한 결과를 출력함

// filter_by_prefix는 사용되지 않았지만 특정 문자열 접두사로 필터링할 수 있는 구조임

// data_는 현재 public으로 선언되어 있어 외부에서 직접 접근하여 출력하고 있음
// - 실제 프로젝트에서는 보통 private로 선언하고 getter 함수를 통해 간접 접근하는 것이 일반적임

// 람다식은 코드 내에서 간단한 함수를 정의하고 사용할 수 있는 문법으로, STL 알고리즘과 함께 사용하면 매우 유용함

// 캡처 리스트([])는 람다식 내부에서 외부 변수를 사용할 수 있게 해줌
// - [=] 값 복사 캡처
// - [&] 참조 캡처
// - [x] 변수 x만 값으로 캡처
// - [&x] 변수 x만 참조로 캡처

// STL 알고리즘 중 sort는 정렬, copy_if는 조건에 맞는 요소만 복사하는 데 사용됨
